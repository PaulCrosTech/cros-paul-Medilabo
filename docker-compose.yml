name: Medilabo

services:

  # Eureka Microservice
  ms-eureka:
    build: ./ms-eureka
    container_name: medilabo_ms_eureka
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -s http://localhost:9002/actuator/health | jq -e '.status == \"UP\"' > /dev/null && exit 0 || exit 1" ]
      interval: 30s
      retries: 5
      timeout: 5s
    networks:
      - rsx-backend


  # Config Microservice
  ms-config:
    build: ./ms-config
    container_name: medilabo_ms_config
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -s http://localhost:9003/actuator/health | jq -e '.status == \"UP\"' > /dev/null && exit 0 || exit 1" ]
      interval: 30s
      retries: 5
      timeout: 5s
    depends_on:
      ms-eureka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
    networks:
      - rsx-backend

  # MySQL Database Service
  dbMySQL:
    image: mysql:8.0
    container_name: medilabo_db_mysql
    environment:
      MYSQL_DATABASE: medilabo_patient
      MYSQL_USER: "myuser"
      MYSQL_PASSWORD: "mypassword"
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    networks:
      - rsx-backend
    volumes:
      - ./ms-patient/src/main/resources/docker/ms_patient_data.sql:/docker-entrypoint-initdb.d/ms_patient_data.sql:ro
      - mysql-for-MsPatient:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root" ]
      interval: 30s
      retries: 5
      timeout: 5s

  # MongoDB Database Service
  dbMongoDB:
    image: mongo:latest
    container_name: medilabo_db_mongodb
    environment:
      MONGO_INITDB_DATABASE: medilabo_note
    volumes:
      - ./ms-note/src/main/resources/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
      - mongoDB-for-MsNote:/data/db
    networks:
      - rsx-backend
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      retries: 5
      timeout: 5s

  # Patient Microservice
  ms-patient:
    build: ./ms-patient
    container_name: medilabo_ms_patient
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -s http://localhost:9005/actuator/health | jq -e '.status == \"UP\"' > /dev/null && exit 0 || exit 1" ]
      interval: 30s
      retries: 5
      timeout: 5s
    depends_on:
      ms-config:
        condition: service_healthy
      dbMySQL:
        condition: service_healthy
    networks:
      - rsx-backend
    environment:
      SPRING_PROFILES_ACTIVE: "docker"

    # Note Microservice
  ms-note:
    build: ./ms-note
    container_name: medilabo_ms_note
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -s http://localhost:9006/actuator/health | jq -e '.status == \"UP\"' > /dev/null && exit 0 || exit 1" ]
      interval: 30s
      retries: 5
      timeout: 5s
    depends_on:
      ms-config:
        condition: service_healthy
      dbMongoDB:
        condition: service_healthy
    networks:
      - rsx-backend
    environment:
      SPRING_PROFILES_ACTIVE: "docker"

  # Risk Microservice
  ms-riskassessment:
    build: ./ms-riskassessment
    container_name: medilabo_ms_riskassessment
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -s http://localhost:9007/actuator/health | jq -e '.status == \"UP\"' > /dev/null && exit 0 || exit 1" ]
      interval: 30s
      retries: 5
      timeout: 5s
    depends_on:
      ms-config:
        condition: service_healthy
    networks:
      - rsx-backend
    environment:
      SPRING_PROFILES_ACTIVE: "docker"

  # Gateway Microservice
  ms-gateway:
    build: ./ms-gateway
    container_name: medilabo_ms_gateway
    ports:
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -s http://localhost:9001/actuator/health | jq -e '.status == \"UP\"' > /dev/null && exit 0 || exit 1" ]
      interval: 30s
      retries: 5
      timeout: 5s
    depends_on:
      ms-note:
        condition: service_healthy
      ms-riskassessment:
        condition: service_healthy
      ms-patient:
        condition: service_healthy
    networks:
      - rsx-backend
    environment:
      SPRING_PROFILES_ACTIVE: "docker"

  #   Frontend Service
  frontend:
    build:
      context: ./client-ui/frontend
    container_name: medilabo_frontend
    ports:
      - "9080:9080"
    depends_on:
      ms-gateway:
        condition: service_healthy


# Network Configuration
networks:
  rsx-backend:
    driver: bridge

# Volume Configuration
volumes:
  mongoDB-for-MsNote:
  mysql-for-MsPatient: